package pojo.annotations;

// Generated 09-feb-2014 10:19:46 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Calleprincipal generated by hbm2java
 */
@Entity
@Table(name = "calleprincipal", schema = "public")
public class Calleprincipal implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int idcalleprincipal;
	private Estado estado;
	private Usuario usuario;
	private Sector sector;
	private String nombre;
	private String abreviado;
	private Date fecha;
	private Set<?> direccions = new HashSet<Object>(0);

	public Calleprincipal() {
	}

	public Calleprincipal(int idcalleprincipal, Estado estado, Usuario usuario,
			Sector sector, String nombre, Date fecha) {
		this.idcalleprincipal = idcalleprincipal;
		this.estado = estado;
		this.usuario = usuario;
		this.sector = sector;
		this.nombre = nombre;
		this.fecha = fecha;
	}

	public Calleprincipal(int idcalleprincipal, Estado estado, Usuario usuario,
			Sector sector, String nombre, String abreviado, Date fecha,
			Set<?> direccions) {
		this.idcalleprincipal = idcalleprincipal;
		this.estado = estado;
		this.usuario = usuario;
		this.sector = sector;
		this.nombre = nombre;
		this.abreviado = abreviado;
		this.fecha = fecha;
		this.direccions = direccions;
	}

	@Id
	@Column(name = "idcalleprincipal", unique = true, nullable = false)
	public int getIdcalleprincipal() {
		return this.idcalleprincipal;
	}

	public void setIdcalleprincipal(int idcalleprincipal) {
		this.idcalleprincipal = idcalleprincipal;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idestado", nullable = false)
	public Estado getEstado() {
		return this.estado;
	}

	public void setEstado(Estado estado) {
		this.estado = estado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idusuario", nullable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idsector", nullable = false)
	public Sector getSector() {
		return this.sector;
	}

	public void setSector(Sector sector) {
		this.sector = sector;
	}

	@Column(name = "nombre", nullable = false, length = 30)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "abreviado", length = 8)
	public String getAbreviado() {
		return this.abreviado;
	}

	public void setAbreviado(String abreviado) {
		this.abreviado = abreviado;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha", nullable = false, length = 29)
	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "calleprincipal",targetEntity=Direccion.class)
	public Set<?> getDireccions() {
		return this.direccions;
	}

	public void setDireccions(Set<?> direccions) {
		this.direccions = direccions;
	}
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
	
	public Calleprincipal clonar() throws Exception {
		return (Calleprincipal)clone();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((abreviado == null) ? 0 : abreviado.hashCode());
		result = prime * result + ((estado == null) ? 0 : estado.getIdestado());
		result = prime * result + ((fecha == null) ? 0 : fecha.hashCode());
		result = prime * result + idcalleprincipal;
		result = prime * result + ((nombre == null) ? 0 : nombre.hashCode());
		result = prime * result + ((sector == null) ? 0 : sector.getIdsector());
		result = prime * result + ((usuario == null) ? 0 : usuario.getIdusuario());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Calleprincipal other = (Calleprincipal) obj;
		if (abreviado == null) {
			if (other.abreviado != null)
				return false;
		} else if (!abreviado.equals(other.abreviado))
			return false;
		if (estado == null) {
			if (other.estado != null)
				return false;
		} else if (estado.getIdestado() != other.estado.getIdestado())
			return false;
		if (fecha == null) {
			if (other.fecha != null)
				return false;
		} else if (!fecha.equals(other.fecha))
			return false;
		if (idcalleprincipal != other.idcalleprincipal)
			return false;
		if (nombre == null) {
			if (other.nombre != null)
				return false;
		} else if (!nombre.equals(other.nombre))
			return false;
		if (sector == null) {
			if (other.sector != null)
				return false;
		} else if (sector.getIdsector() != other.sector.getIdsector())
			return false;
		if (usuario == null) {
			if (other.usuario != null)
				return false;
		} else if (usuario.getIdusuario() != other.usuario.getIdusuario())
			return false;
		return true;
	}
	
	

}
