package pojo.annotations;

// Generated 09/02/2014 10:20:13 AM by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Conyuge generated by hbm2java
 */
@Entity
@Table(name = "conyuge", schema = "public")
public class Conyuge implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7738032051406347728L;
	private String idconyuge;
	private Clientes clientes;
	private String nombre1;
	private String nombre2;
	private String apellido1;
	private String apellido2;
	private String identificacion;

	public Conyuge() {
	}

	public Conyuge(String idconyuge, Clientes clientes) {
		this.idconyuge = idconyuge;
		this.clientes = clientes;
	}

	public Conyuge(String idconyuge, Clientes clientes, String nombre1,
			String nombre2, String apellido1, String apellido2) {
		this.idconyuge = idconyuge;
		this.clientes = clientes;
		this.nombre1 = nombre1;
		this.nombre2 = nombre2;
		this.apellido1 = apellido1;
		this.apellido2 = apellido2;
	}

	@Id
	@Column(name = "idconyuge", unique = true, nullable = false, length = 20)
	public String getIdconyuge() {
		return this.idconyuge;
	}

	public void setIdconyuge(String idconyuge) {
		this.idconyuge = idconyuge;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idcliente", nullable = false)
	public Clientes getClientes() {
		return this.clientes;
	}

	public void setClientes(Clientes clientes) {
		this.clientes = clientes;
	}

	@Column(name = "nombre1", length = 25)
	public String getNombre1() {
		return this.nombre1;
	}

	public void setNombre1(String nombre1) {
		this.nombre1 = nombre1;
	}

	@Column(name = "nombre2", length = 25)
	public String getNombre2() {
		return this.nombre2;
	}

	public void setNombre2(String nombre2) {
		this.nombre2 = nombre2;
	}

	@Column(name = "apellido1", length = 25)
	public String getApellido1() {
		return this.apellido1;
	}

	public void setApellido1(String apellido1) {
		this.apellido1 = apellido1;
	}

	@Column(name = "apellido2", length = 25)
	public String getApellido2() {
		return this.apellido2;
	}

	public void setApellido2(String apellido2) {
		this.apellido2 = apellido2;
	}

	@Column(name = "identificacion", length = 30)
	public String getIdentificacion() {
		return identificacion;
	}

	public void setIdentificacion(String identificacion) {
		this.identificacion = identificacion;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((apellido1 == null) ? 0 : apellido1.hashCode());
		result = prime * result
				+ ((apellido2 == null) ? 0 : apellido2.hashCode());
		result = prime * result
				+ ((clientes == null) ? 0 : clientes.hashCode());
		result = prime * result
				+ ((idconyuge == null) ? 0 : idconyuge.hashCode());
		result = prime * result
				+ ((identificacion == null) ? 0 : identificacion.hashCode());
		result = prime * result + ((nombre1 == null) ? 0 : nombre1.hashCode());
		result = prime * result + ((nombre2 == null) ? 0 : nombre2.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Conyuge other = (Conyuge) obj;
		if (apellido1 == null) {
			if (other.apellido1 != null)
				return false;
		} else if (!apellido1.equals(other.apellido1))
			return false;
		if (apellido2 == null) {
			if (other.apellido2 != null)
				return false;
		} else if (!apellido2.equals(other.apellido2))
			return false;
		if (clientes == null) {
			if (other.clientes != null)
				return false;
		} else if (!clientes.equals(other.clientes))
			return false;
		if (idconyuge == null) {
			if (other.idconyuge != null)
				return false;
		} else if (!idconyuge.equals(other.idconyuge))
			return false;
		if (identificacion == null) {
			if (other.identificacion != null)
				return false;
		} else if (!identificacion.equals(other.identificacion))
			return false;
		if (nombre1 == null) {
			if (other.nombre1 != null)
				return false;
		} else if (!nombre1.equals(other.nombre1))
			return false;
		if (nombre2 == null) {
			if (other.nombre2 != null)
				return false;
		} else if (!nombre2.equals(other.nombre2))
			return false;
		return true;
	}
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public Conyuge clonar() throws Exception {
		return (Conyuge)this.clone();
	}
}
