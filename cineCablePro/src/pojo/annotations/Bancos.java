package pojo.annotations;

// Generated 09/02/2014 10:20:13 AM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Bancos generated by hbm2java
 */
@Entity
@Table(name = "bancos", schema = "public")
public class Bancos implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -9004130984750922068L;
	private int idbanco;
	private Estado estado;
	private Tipoentidad tipoentidad;
	private Empresa empresa;
	private String nombre;
	private String abreviado;
	private int idusuario;
	private Date fecha;
	/*private Set<?> tpagosesForIdbcoemisor = new HashSet<Object>(0);
	private Set<?> debitobcos = new HashSet<Object>(0);
	private Set<?> tpagosesForIdbcoemisortar = new HashSet<Object>(0);*/

	public Bancos() {
	}

	public Bancos(int idbanco, Estado estado, Tipoentidad tipoentidad,
			Empresa empresa, String nombre, int idusuario, Date fecha) {
		this.idbanco = idbanco;
		this.estado = estado;
		this.tipoentidad = tipoentidad;
		this.empresa = empresa;
		this.nombre = nombre;
		this.idusuario = idusuario;
		this.fecha = fecha;
	}

	public Bancos(int idbanco, Estado estado, Tipoentidad tipoentidad,
			Empresa empresa, String nombre, String abreviado, int idusuario,
			Date fecha/*, Set<?> tpagosesForIdbcoemisor, Set<?> debitobcos,
			Set<?> tpagosesForIdbcoemisortar*/) {
		this.idbanco = idbanco;
		this.estado = estado;
		this.tipoentidad = tipoentidad;
		this.empresa = empresa;
		this.nombre = nombre;
		this.abreviado = abreviado;
		this.idusuario = idusuario;
		this.fecha = fecha;
		/*this.tpagosesForIdbcoemisor = tpagosesForIdbcoemisor;
		this.debitobcos = debitobcos;
		this.tpagosesForIdbcoemisortar = tpagosesForIdbcoemisortar;*/
	}

	@Id
	@Column(name = "idbanco", unique = true, nullable = false)
	public int getIdbanco() {
		return this.idbanco;
	}

	public void setIdbanco(int idbanco) {
		this.idbanco = idbanco;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idestado", nullable = false)
	public Estado getEstado() {
		return this.estado;
	}

	public void setEstado(Estado estado) {
		this.estado = estado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idtipoentidad", nullable = false)
	public Tipoentidad getTipoentidad() {
		return this.tipoentidad;
	}

	public void setTipoentidad(Tipoentidad tipoentidad) {
		this.tipoentidad = tipoentidad;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idempresa", nullable = false)
	public Empresa getEmpresa() {
		return this.empresa;
	}

	public void setEmpresa(Empresa empresa) {
		this.empresa = empresa;
	}

	@Column(name = "nombre", nullable = false, length = 30)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "abreviado", length = 6)
	public String getAbreviado() {
		return this.abreviado;
	}

	public void setAbreviado(String abreviado) {
		this.abreviado = abreviado;
	}

	@Column(name = "idusuario", nullable = false)
	public int getIdusuario() {
		return this.idusuario;
	}

	public void setIdusuario(int idusuario) {
		this.idusuario = idusuario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha", nullable = false, length = 29)
	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((abreviado == null) ? 0 : abreviado.hashCode());
		result = prime * result + ((empresa == null) ? 0 : empresa.getIdempresa());
		result = prime * result + ((estado == null) ? 0 : estado.getIdestado());
		result = prime * result + ((fecha == null) ? 0 : fecha.hashCode());
		result = prime * result + idbanco;
		result = prime * result + idusuario;
		result = prime * result + ((nombre == null) ? 0 : nombre.hashCode());
		result = prime * result
				+ ((tipoentidad == null) ? 0 : tipoentidad.getIdtipoentidad());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Bancos other = (Bancos) obj;
		if (abreviado == null) {
			if (other.abreviado != null)
				return false;
		} else if (!abreviado.equals(other.abreviado))
			return false;
		if (empresa == null) {
			if (other.empresa != null)
				return false;
		} else if (empresa.getIdempresa() != other.empresa.getIdempresa())
			return false;
		if (estado == null) {
			if (other.estado != null)
				return false;
		} else if (estado.getIdestado() != other.estado.getIdestado())
			return false;
		if (fecha == null) {
			if (other.fecha != null)
				return false;
		} else if (!fecha.equals(other.fecha))
			return false;
		if (idbanco != other.idbanco)
			return false;
		if (idusuario != other.idusuario)
			return false;
		if (nombre == null) {
			if (other.nombre != null)
				return false;
		} else if (!nombre.equals(other.nombre))
			return false;
		if (tipoentidad == null) {
			if (other.tipoentidad != null)
				return false;
		} else if (tipoentidad.getIdtipoentidad() != other.tipoentidad.getIdtipoentidad())
			return false;
		return true;
	}
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		Bancos bancos = (Bancos) super.clone();
		bancos.setEstado((Estado)bancos.getEstado().clone());
		bancos.setTipoentidad((Tipoentidad)bancos.getTipoentidad().clone());
		bancos.setEmpresa((Empresa)bancos.getEmpresa().clone());
		return bancos;
	}

	/*@OneToMany(fetch = FetchType.LAZY, mappedBy = "bancosByIdbcoemisor")
	public Set<?> getTpagosesForIdbcoemisor() {
		return this.tpagosesForIdbcoemisor;
	}

	public void setTpagosesForIdbcoemisor(Set<?> tpagosesForIdbcoemisor) {
		this.tpagosesForIdbcoemisor = tpagosesForIdbcoemisor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bancos")
	public Set<?> getDebitobcos() {
		return this.debitobcos;
	}

	public void setDebitobcos(Set<?> debitobcos) {
		this.debitobcos = debitobcos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bancosByIdbcoemisortar")
	public Set<?> getTpagosesForIdbcoemisortar() {
		return this.tpagosesForIdbcoemisortar;
	}

	public void setTpagosesForIdbcoemisortar(Set<?> tpagosesForIdbcoemisortar) {
		this.tpagosesForIdbcoemisortar = tpagosesForIdbcoemisortar;
	}*/

}
