package pojo.annotations;

// Generated 09-feb-2014 10:19:46 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Sector generated by hbm2java
 */
@Entity
@Table(name = "sector", schema = "public")
public class Sector implements java.io.Serializable, Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int idsector;
	private Estado estado;
	private Usuario usuario;
	private Ciudad ciudad;
	private String nombre;
	private String abreviado;
	private Date fecha;
	private Set<?> calleprincipals = new HashSet<Object>(0);
	private Set<?> callesecundarias = new HashSet<Object>(0);
	private Set<?> direccions = new HashSet<Object>(0);
	private Set<?> edificios = new HashSet<Object>(0);
	
	public Sector() {
	}

	public Sector(int idsector, Estado estado,Ciudad ciudad, Usuario usuario,
			 String nombre, Date fecha) {
		this.idsector = idsector;
		this.estado = estado;
		this.usuario = usuario;
		this.ciudad = ciudad;
		this.nombre = nombre;
		this.fecha = fecha;
	}

	public Sector(int idsector, Estado estado, Usuario usuario,
			Ciudad ciudad, String nombre, String abreviado, Date fecha,
			Set<?> calleprincipals,Set<?> callesecundarias, Set<?> direccions,Set<?> edificios) {
		this.idsector = idsector;
		this.estado = estado;
		this.usuario = usuario;
		this.ciudad = ciudad;
		this.nombre = nombre;
		this.abreviado = abreviado;
		this.fecha = fecha;
		this.calleprincipals = calleprincipals;
		this.callesecundarias = callesecundarias;
		this.direccions = direccions;
		this.edificios = edificios;
	}

	@Id
	@Column(name = "idsector", unique = true, nullable = false)
	public int getIdsector() {
		return this.idsector;
	}

	public void setIdsector(int idsector) {
		this.idsector = idsector;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idestado", nullable = false)
	public Estado getEstado() {
		return this.estado;
	}

	public void setEstado(Estado estado) {
		this.estado = estado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idusuario", nullable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idciudad", nullable = false)
	public Ciudad getCiudad() {
		return this.ciudad;
	}

	public void setCiudad(Ciudad ciudad) {
		this.ciudad = ciudad;
	}

	@Column(name = "nombre", nullable = false, length = 25)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "abreviado", length = 6)
	public String getAbreviado() {
		return this.abreviado;
	}

	public void setAbreviado(String abreviado) {
		this.abreviado = abreviado;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha", nullable = false, length = 29)
	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sector",targetEntity=Callesecundaria.class)
	public Set<?> getCallesecundarias() {
		return this.callesecundarias;
	}

	public void setCallesecundarias(Set<?> callesecundarias) {
		this.callesecundarias = callesecundarias;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sector",targetEntity=Calleprincipal.class)
	public Set<?> getCalleprincipals() {
		return this.calleprincipals;
	}

	public void setCalleprincipals(Set<?> calleprincipals) {
		this.calleprincipals = calleprincipals;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sector",targetEntity=Edificio.class)
	public Set<?> getEdificios() {
		return this.edificios;
	}

	public void setEdificios(Set<?> edificios) {
		this.edificios = edificios;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sector",targetEntity=Direccion.class)
	public Set<?> getDireccions() {
		return this.direccions;
	}

	public void setDireccions(Set<?> direccions) {
		this.direccions = direccions;
	}
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

}
